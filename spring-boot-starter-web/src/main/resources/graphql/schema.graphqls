type Query {
  currentBalance(balanceRequest: BalanceGqlRequest): BalanceGqlResponse
  listPastTransfers(pastTransfersRequest: PastTransfersGqlRequest): PastTransfersGqlResponse
}

type Mutation {
  commissionTransfer(transferRequest: TransferGqlRequest): TransferGqlResponse
}

input BalanceGqlRequest {
  account: String
}

type BalanceGqlResponse {
  currentBalance: Float
}

input PastTransfersGqlRequest {
  account: String
}

type PastTransfersGqlResponse {
  transfers: [Transfer]
}

input TransferGqlRequest {
  requestedTransfer: TransferInput
}

type TransferGqlResponse {
  success: Boolean
}

input TransferInput {
  from: String
  to: String
  reference: String
  amount: Float
  currency: Currency
}

type Transfer {
  from: String
  to: String
  reference: String
  amount: Float
  currency: Currency
}

enum Currency {
  EURO
  DOLLAR
}